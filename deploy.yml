# THIS PLAYBOOK
# - Upgrades Debian Packages
# - (re)installs lit-os including host-side tooling (as if from scratch)
# MANUALLY REBOOT THE MACHINE to finalize the update

- name: Update Debian Packages, deploy/upgrade lit-os
  hosts: all
  become: yes
  gather_facts: true

  pre_tasks:
    - name: Print Kernel Version
      debug:
        msg: "Kernel Version is {{ ansible_kernel }}"
    - name: Print OS Version
      debug:
        msg: "OS Version is {{ ansible_distribution }} {{ ansible_distribution_version }}"
    - name: Print network info before upgrade
      block:
        - name: Read the /etc/network/interfaces file
          command: cat /etc/network/interfaces
          ignore_errors: yes
        - name: Run ip route command
          shell: ip route
          register: ip_route_output
        - name: Print ip route output
          debug:
            var: ip_route_output.stdout
        - name: Run ip a command
          shell: ip a
          register: ip_a_output
        - name: Print ip a output
          debug:
            var: ip_a_output.stdout
        - name: Print network devices starting with 'en'
          debug:
            msg: "{{ ansible_facts['interfaces']| select('match', '^en.*') | list }}"

    - name: run pre-deploy checks
      include_tasks: tasks/prechecks.yml

  tasks:
    - name: Include network-specific variables
      include_vars:
        file: "networks/{{ network_name }}.yml"
      when: network_name != 'custom'

    - name: Write salt files
      include_tasks: tasks/write_salt_files.yml

    - name: Cleanup state from previous litos install
      include_tasks: tasks/cleanup_previous_litos_install.yml

    - name: Upgrade Debian packages
      include_tasks: tasks/update_debian_packages.yml

    - name: Deploy (or upgrade) LitOS
      include_tasks: tasks/install_litos.yml

    - name: Execute post_install task
      include_tasks: tasks/post_install.yml

  post_tasks:
    - name: Print network info after upgrade
      block:
        - name: Read the /etc/network/interfaces file
          command: grep 'bond-slaves' /etc/network/interfaces
          register: grep_interfaces_post
          changed_when: false
          when: 'provider_class is defined and provider_class == "advance"'
        - name: Check status of systemd-networkd service
          command: systemctl status systemd-networkd
          register: networkd_status
          failed_when: false
          changed_when: false
        - name: Print status of systemd-networkd service
          debug:
            msg: "systemd-networkd status: {{ networkd_status.stdout }}"
        - name: Check status of networking service
          command: systemctl status networking
          register: networking_status
          failed_when: false
          changed_when: false
        - name: Print status of networking service
          debug:
            msg: "networking status: {{ networking_status.stdout }}"
    - name: Print Kernel Version
      debug:
        msg: "Kernel Version is {{ ansible_kernel }}"
    - name: Print OS Version
      debug:
        msg: "OS Version is {{ ansible_distribution }} {{ ansible_distribution_version }}"
    - name: Get network interfaces
      shell: ip a | grep '^[0-9]*:' | cut -d':' -f2 --output-delimiter=":"
      register: ip_a_output
      changed_when: false
    - name: Print network interfaces
      debug:
        var: ip_a_output.stdout
    - name: Notify manual step for advance class machines
      debug:
        msg: "Manual interface comparison required for ADVANCE provider"
      notify: notify manual step for advance class machines
      when: 'provider_class is defined and provider_class == "advance"'
      changed_when: true # Make yellow to warn this is a manual step
